Grading Integration Tests
=========================

The overarching requirement in this scenario is the school curriculum.  That is,
this requirement represents the work that has to be done to graduate.

  >>> from schooltool.requirement import interfaces, requirement
  >>> graduation = requirement.Requirement(u'Graduation Requirements')

We want to create a course to provide some context:

  >>> from schooltool.course.course import Course
  
  >>> course = Course()
  >>> course.title = u'Economics'
  >>> course.title
  u'Economics'

The course implements `IRequirement`:

  >>> course_req = interfaces.IRequirement(course)
  >>> course_req
  Requirement(u'Economics')

We want to indicate that Economics is part of the Graduation Requirements:

  >>> graduation[u'econ'] = course_req
  >>> sorted(graduation.keys())
  [u'econ']

Now we'll create a section of the economics course.  It also implements 
`IRequirement`:

  >>> from schooltool.course.section import Section
  
  >>> section = Section()
  >>> section.title = u"3rd Period Econ."    
  >>> req = interfaces.IRequirement(section)
  >>> req
  Requirement(u'3rd Period Econ.')

This section should inherit the requirements of the course:

  >>> req.addBase(course_req)
  >>> req.bases
  [Requirement(u'Economics')]
  
Create some people.  
  
  >>> from schooltool.person.person import Person
  
  >>> student = Person(u"Jane Student")
  >>> teacher = Person(u"Joe Teacher")
  
Grab the student's ``IEvaluations`` adapter:

  >>> evals = interfaces.IEvaluations(student)
  >>> evals
  <Evaluations for <schooltool.person.person.Person object at ...>
  >>> from zope.app import zapi
  >>> sorted(evals.keys())
  []

At the moment we need to create a scoring system from scratch:

  >>> from schooltool.requirement.scoresystem import AbstractScoreSystem
  >>> from schooltool.requirement.scoresystem import UNSCORED
  >>> class PassFail(AbstractScoreSystem):
  ...    PASS = True
  ...    FAIL = False
  ...    def isPassingScore(self, score):
  ...        return bool(score)
  ...
  ...    def isValidScore(self, score):
  ...        return score in [self.PASS, self.FAIL, UNSCORED]
  ...
  ...    def __repr__(self):
  ...        return '%s(%r)' % (self.__class__.__name__, self.title)
  
  >>> pf = PassFail(u'Simple Pass/Fail System')
  >>> pf.title
  u'Simple Pass/Fail System'
  
We should be able to make an evaluation now:

  >>> from schooltool.requirement import evaluation
  >>> ev = evaluation.Evaluation(req, pf, PassFail.PASS, teacher)
  >>> ev.requirement
  Requirement(u'3rd Period Econ.')
  >>> ev.scoreSystem
  PassFail(u'Simple Pass/Fail System')
  >>> ev.value
  True
  >>> ev.evaluator
  <schooltool.person.person.Person object at ...>

And we then attach the section evaluation to the student being evaluated:

  >>> sorted(evals.keys())
  []
  >>> ev
  <Evaluation for Requirement(u'3rd Period Econ.'), value=True>

We need to do some kind of setup to get this working.

  >>> #evals.addEvaluation(ev)
  