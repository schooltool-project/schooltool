==================
Password edit form
==================

We will edit the password of a person. First, let's create the person:

  >>> from zope.testbrowser.testing import Browser
  >>> browser = Browser()
  >>> browser.addHeader('Authorization', 'Basic manager:schooltool')

  >>> from schooltool.app.browser.ftests.setup import addPerson
  >>> addPerson('foobar', 'foobar', 'barfoo')

We will set the password that user:

  >>> browser.open('http://localhost/persons/foobar/@@password_edit.html')
  >>> password_widget = browser.getControl(name='form.password')
  >>> password_widget.value = 'mypassword'
  >>> confirm_widget = browser.getControl(name='form.password.confirm')
  >>> confirm_widget.value = 'mypassword'
  >>> browser.getControl('Apply').click()

We will get the 'Changed password' message:

  >>> 'Changed password' in browser.contents
  True

We can now log in as that user with that password:

  >>> def canLogin(username, password):
  ...     user_browser = Browser()
  ...     user_browser.addHeader('Authorization', 'Basic %s:%s' % (username,
  ...         password))
  ...     user_browser.open('http://localhost/')
  ...     return 'My Calendar' in user_browser.contents
  >>> canLogin('foobar', 'mypassword')
  True

Now let's try putting in something inconsistent in confirm:

  >>> browser.open('http://localhost/persons/foobar/@@password_edit.html')
  >>> password_widget = browser.getControl(name='form.password')
  >>> password_widget.value = 'mypassword'
  >>> confirm_widget = browser.getControl(name='form.password.confirm')
  >>> confirm_widget.value = 'mypassword2'
  >>> browser.getControl('Apply').click()

We get a message that this didn't work:

  >>> 'Supplied passwords are not identical' in browser.contents
  True

We can still log in as usual with the original password:

  >>> canLogin('foobar', 'mypassword')
  True
  >>> canLogin('foobar', 'mypassword2')
  False

We can try putting in an empty password, too:

  >>> browser.open('http://localhost/persons/foobar/@@password_edit.html')
  >>> password_widget = browser.getControl(name='form.password')
  >>> password_widget.value = ''
  >>> confirm_widget = browser.getControl(name='form.password.confirm')
  >>> confirm_widget.value = ''
  >>> browser.getControl('Apply').click()

The system will not allow that, instead leaving the password unchanged:

  >>> 'unchanged' in browser.contents
  True

Since the password didn't change, we can still log in as usual with
the original password:

  >>> canLogin('foobar', 'mypassword')
  True
  >>> canLogin('foobar', '')
  False

What happens if person tries to change his password himself?

  >>> user_browser = Browser()
  >>> user_browser.handleErrors = False
  >>> user_browser.addHeader('Authorization', 'Basic foobar:mypassword')
  >>> user_browser.open('http://localhost/persons/foobar/@@password_edit.html')
  >>> password_widget = user_browser.getControl(name='form.password')
  >>> password_widget.value = 'new_password'
  >>> confirm_widget = user_browser.getControl(name='form.password.confirm')
  >>> confirm_widget.value = 'new_password'
  >>> user_browser.getControl('Apply').click()

  >>> canLogin('foobar', 'new_password')
  True

Let's take away the permission:

  >>> browser.open('http://localhost/access_control.html')
  >>> browser.getControl('Persons can change their own passwords').click()
  >>> browser.getControl('Apply').click()

And try changing the password again:

  >>> user_browser = Browser()
  >>> user_browser.handleErrors = False
  >>> user_browser.addHeader('Authorization', 'Basic foobar:new_password')
  >>> user_browser.open('http://localhost/persons/foobar/@@password_edit.html')
  >>> password_widget = user_browser.getControl(name='form.password')
  >>> password_widget.value = 'another_password'
  >>> confirm_widget = user_browser.getControl(name='form.password.confirm')
  >>> confirm_widget.value = 'another_password'
  >>> user_browser.getControl('Apply').click()
  Traceback (most recent call last):
  ...
  Unauthorized: (<...PersonPasswordWriter object at ...>, 'setPassword', 'schooltool.edit')
