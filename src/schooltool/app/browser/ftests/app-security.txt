Functional doctest for schooltool.app security
==============================================

SchoolBell as a Zope 3 content object
-------------------------------------

First, we'll go to the Zope 3 management interface and verify that you can add
SchoolBell instances from the add menu.  You need manager permissions
for that.

    >>> from zope.testbrowser.testing import Browser
    >>> manager = Browser()
    >>> manager.addHeader('Authorization', 'Basic manager:schooltool')
    >>> manager.handleErrors = False
    >>> manager.open('http://localhost/')

Let's quickly create a user to run the tests with:

    >>> manager.getLink('Persons').click()
    >>> manager.getLink('New Person').click()

    >>> manager.getControl('Full name').value = 'Frog'
    >>> manager.getControl('Username').value = 'frog'
    >>> manager.getControl('Password').value = 'pwd'
    >>> manager.getControl('Confirm').value = 'pwd'
    >>> manager.getControl('Add').click()

Now we log in as the frog:

    >>> frog = Browser()
    >>> frog.open('http://localhost/')
    >>> frog.getLink('Log In').click()
    >>> frog.getControl('Username').value = 'frog'
    >>> frog.getControl('Password').value = 'pwd'
    >>> frog.getControl('Log in').click()

The user should have the view permission set by default, as well as
viewCalendar set for the application calendar:

    >>> frog.open('http://localhost')
    >>> print frog.url
    http://localhost/calendar
    >>> frog.headers['status']
    '200 Ok'

We can traverse to the person index:

    >>> frog.getLink('Persons').click()
    >>> print frog.url
    http://localhost/persons
    >>> frog.headers['status']
    '200 Ok'

We can traverse to the group index too

    >>> frog.getLink('Groups').click()
    >>> '<h1>Group index</h1>' in frog.contents
    True

We can traverse to the resource index too

    >>> frog.getLink('Resources').click()
    >>> '<h1>Resource index</h1>' in frog.contents
    True


Adding stuff -- schooltool.create permission
--------------------------------------------

Adding persons should not work without a schooltool.create permission:

    >>> frog.getLink('Persons').click()

    >>> 'New Person' in frog.contents
    False

    >>> frog.open('http://localhost/persons/add.html')
    >>> print frog.url
    http...?forbidden=yes&nexturl=http%3A//localhost/persons/add.html

Adding a group also fails:

    >>> frog.getLink('Groups').click()

    >>> 'New Group' in frog.contents
    False

    >>> frog.open('http://localhost/groups/+/addSchoolToolGroup.html')
    >>> print frog.url
    http...?forbidden=yes&nexturl=http%3A//localhost/groups/%2B/...

And the resource too:

    >>> frog.getLink('Resources').click()

    >>> 'New Resource' in frog.contents
    False

    >>> frog.open(
    ...     'http://localhost/resources/+/addSchoolToolResource.html')
    >>> print frog.url
    http...?forbidden=yes&nexturl=http%3A//localhost/resources/%2B/...

Let's grant the permission to the user:

    >>> manager.open('http://localhost/acl.html')
    >>> ctrl = manager.getControl(name='sb.person.frog')
    >>> ctrl.value = ['schooltool.create', 'schooltool.view']
    >>> manager.getControl('Set Access', index=1).click()

Now the person adding works:

    >>> frog.getLink('Persons').click()
    >>> frog.getLink('New Person').click()

    >>> frog.getControl('Full name').value = 'Snake'
    >>> frog.getControl('Username').value = 'snake'
    >>> frog.getControl('Password').value = 'badger'
    >>> frog.getControl('Confirm').value = 'badger'
    >>> frog.getControl('Add').click()

    >>> 'Snake' in frog.contents
    True

And a group:

    >>> frog.getLink('Groups').click()
    >>> frog.getLink('New Group').click()

    >>> frog.getControl('Title').value = 'Venerable Frogs'
    >>> frog.getControl('Add').click()

    >>> 'Venerable Frogs' in frog.contents
    True

And a resource too:

    >>> frog.getLink('Resources').click()
    >>> frog.getLink('New Resource').click()

    >>> frog.getControl('Title').value = 'Mud'
    >>> frog.getControl('Add').click()

    >>> 'Mud' in frog.contents
    True

Lets try deleting the snake:

    >>> frog.getLink('Persons').click()
    >>> frog.getControl(name='delete.snake').value = '1'
    >>> frog.getControl('Delete').click()

    >>> print frog.contents
    <BLANKLINE>
    ...
      <ul>
        <form method="post" action="delete.html">
          <li>
            <input type="hidden" name="delete.snake" />
            <a href="http://localhost/persons/snake">Snake</a>
          </li>
          <div class="controls">
            <input type="submit" class="button-cancel"
                   name="UPDATE_SUBMIT" value="Confirm" />
            <input type="submit" class="button-cancel"
                   name="CANCEL" value="Cancel" />
          </div>
        </form>
      </ul>
     ...

Lets confirm it:

    >>> frog.getControl('Confirm').click()

Snakes be gone:

    >>> 'Snake' in frog.contents
    False

If frog tries deleting himself - he should get an error:

    >>> frog.getLink('Persons').click()
    >>> frog.getControl(name='delete.frog').value = '1'
    >>> frog.getControl('Delete').click()

    >>> print frog.contents
    <BLANKLINE>
    ...
      <p>
        Sorry, you may not delete your own user account.
      </p>
    ...


Editing things -- schooltool.edit permission
--------------------------------------------

The user can edit his own info:

    >>> frog.getLink('Frog').click()
    >>> frog.getLink('edit name').click()

    >>> frog.getControl('Full name').value = 'Toad'
    >>> frog.getControl('New password').value = 'newpwd'
    >>> frog.getControl('Verify password').value = 'newpwd'
    >>> frog.getControl('Apply').click()

    >>> 'Toad' in frog.contents
    True
    >>> 'Password was successfully changed!' in frog.contents
    True

We need to log in again:

    >>> frog.getLink('Log Out').click()
    >>> frog.getLink('Log In').click()
    >>> frog.getControl('Username').value = 'frog'
    >>> frog.getControl('Password').value = 'newpwd'
    >>> frog.getControl('Log in').click()

But we can revoke that permission from him:

    >>> manager.open('http://localhost/persons/frog/acl.html')
    >>> ctrl = manager.getControl(name='sb.person.frog')
    >>> ctrl.value = ['schooltool.create', 'schooltool.view',
    ...               'schooltool.viewCalendar', 'schooltool.addEvent',
    ...               'schooltool.modifyEvent']
    >>> manager.getControl('Set Access', index=1).click()

Now he can't edit the info:

    >>> frog.getLink('Toad').click()
    >>> frog.getLink('edit name').click()

    >>> frog.getControl('Full name').value = 'Mr. Toad'
    >>> frog.getControl('New password').value = 'whatever'
    >>> frog.getControl('Verify password').value = 'whatever'
    >>> frog.getControl('Apply').click()

    >>> print frog.url
    http...?forbidden=yes&nexturl=http%3A//.../persons/frog/%40%40edit.html


But still can see his calendar (regression test for Issue354 User
can't View calendar without Edit permission):

    >>> frog.open('http://localhost/persons/frog/calendar/2005-08-22')
    >>> 'Calendar for Toad - Monday, 2005-08-22' in frog.contents
    True

The same goes for the groups and resources edit forms.  Not allowed:

    >>> frog.open('http://localhost/')
    >>> frog.getLink('Groups').click()
    >>> frog.getLink('Venerable Frogs').click()
    >>> 'Edit Info' in frog.contents
    False
    >>> frog.open('http://localhost/groups/venerable-frogs/edit.html')
    >>> print frog.url
    http://localhost/@@login.html?forbidden=yes&nexturl=...

    >>> frog.getLink('Resources').click()
    >>> frog.getLink('Mud').click()
    >>> 'Edit Info' in frog.contents
    False
    >>> frog.open('http://localhost/resources/mud/edit.html')
    >>> print frog.url
    http://localhost/@@login.html?forbidden=yes&nexturl=...

Let's grant the edit permission:

    >>> manager.open('http://localhost/acl.html')
    >>> ctrl = manager.getControl(name='sb.person.frog')
    >>> ctrl.value = ['schooltool.edit', 'schooltool.view']
    >>> manager.getControl('Set Access', index=1).click()

Lo and behold:

    >>> frog.getLink('Groups').click()
    >>> frog.getLink('Venerable Frogs').click()
    >>> 'Edit Info' in frog.contents
    True
    >>> frog.getLink('Edit Info').click()
    >>> frog.getControl('Title').value = 'Venerables'
    >>> frog.getControl('Apply').click()
    >>> 'Venerables' in frog.contents
    True

    >>> frog.getLink('Resources').click()
    >>> frog.getLink('Mud').click()
    >>> 'Edit Info' in frog.contents
    True
    >>> frog.getLink('Edit Info').click()
    >>> frog.getControl('Title').value = 'Silt'
    >>> frog.getControl('Description').value = 'bottom'
    >>> frog.getControl('Apply').click()
    >>> 'Silt' in frog.contents
    True


Relationships
-------------

In order to add persons to groups, a user must have a manageMembership
permission on those groups.

    >>> frog.getLink('Groups').click()
    >>> frog.getLink('Venerables').click()
    >>> frog.getLink('edit members').click()
    >>> print frog.url
    http://localhost/@@login.html?forbidden=yes&nexturl=...

Let's grant the guy the permission on the group:

    >>> manager.open(
    ...     'http://localhost/groups/venerable-frogs/acl.html')
    >>> ctrl = manager.getControl(name='sb.person.frog')
    >>> ctrl.value = ['schooltool.view', 'schooltool.manageMembership']
    >>> manager.getControl('Set Access', index=1).click()

Now, the group join must succeed.

    >>> frog.getLink('Groups').click()
    >>> frog.getLink('Venerables').click()
    >>> frog.getLink('edit members').click()

    >>> frog.getControl(name='ADD_MEMBER.frog').value = True
    >>> frog.getControl('Add Members').click()
    >>> print frog.contents
    <BLANKLINE>
    ...
      <legend>Current Members</legend>
    ...
    Toad
    ...
      <legend>Add Members</legend>
    ...

Regression test to see if recurring events in site-wide calendar can be viewed
by unauthenticated users (issue345):

  Add a recurring event to the site-wide calendar:

    >>> manager.open('http://localhost/calendar')
    >>> manager.getLink('New Event').click()

    >>> manager.getControl('Title').value = 'Something'
    >>> manager.getControl('Date').value = '2005-02-03'
    >>> manager.getControl('Time').value = '01:00'
    >>> manager.getControl('Duration').value = '500'
    >>> manager.getControl('Recurring').selected = True
    >>> manager.getControl(name='field.recurrence.used').value = '1'
    >>> manager.getControl('Repeat until').selected = True
    >>> manager.getControl(name='field.until').value = '2005-02-08'
    >>> manager.getControl('Add').click()

  Make sure unauthenticated does not get redirected to the login page

    >>> anonymous = Browser()
    >>> anonymous.handleErrors = False
    >>> anonymous.open('http://localhost/calendar/2005-02-03')
    >>> print anonymous.url
    http://localhost/calendar/2005-02-03

  Even if he is accessing the calendar indirectly:

    >>> anonymous.open('http://localhost')
    >>> print anonymous.url
    http://localhost/calendar
