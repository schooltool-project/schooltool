Timetabling in SchoolTool
=========================

This functional doctest demonstrates and tests SchoolTool's timetables.


Overview
--------

1. Definition of terms
2. Definition of timetable schemas
3. Import of timetables
4. Usage of timetables


Prologue
--------

We will need a SchoolTool instance.  Let's call it 'frogpond'.

    >>> from zope.testbrowser import Browser
    >>> manager = Browser()
    >>> manager.addHeader('Authorization', 'Basic mgr:mgrpw')
    >>> manager.handleErrors = False
    >>> manager.open('http://localhost/contents.html')

    >>> manager.getLink('SchoolTool').click()
    >>> manager.getControl(name='new_value').value = 'frogpond'
    >>> manager.getControl('Apply').click()
    >>> manager.getLink('frogpond').click()

Let's create a person for use in tests:

    >>> manager.getLink('Persons').click()
    >>> manager.getLink('New Person').click()

    >>> manager.getControl('Full name').value = 'Frog'
    >>> manager.getControl('Username').value = 'frog'
    >>> manager.getControl('Password').value = 'pwd'
    >>> manager.getControl('Verify password').value = 'pwd'
    >>> manager.getControl('Add').click()

And a group:

    >>> manager.getLink('Groups').click()
    >>> manager.getLink('New Group').click()

    >>> manager.getControl('Title').value = 'Animals'
    >>> manager.getControl('Add').click()

And a resource:

    >>> manager.getLink('Resources').click()
    >>> manager.getLink('New Resource').click()

    >>> manager.getControl('Title').value = 'Mud'
    >>> manager.getControl('Add').click()


Terms
-----

Terms are periods of time (such as semesters or trimesters) that also say which
days are holidays and which are not.  You can define any number of terms -- and
you have to have at least one if you want to use timetables.

Initially there are no terms defined.

    >>> manager.getLink('Terms').click()
    >>> '<p>There are none.</p>' in manager.contents
    True

The manager can add one.

    >>> manager.getLink('New Term').click()

First you have to specify the title and date.

    >>> manager.getControl('Title').value = '2005 Fall'
    >>> manager.getControl('Start date').value = '2005-09-01'
    >>> manager.getControl('End date').value = '2005-12-31'
    >>> manager.getControl('Next').click()

Then you can click on a couple of the toggle buttons to mark all Saturdays and
Sundays as holidays.

    >>> manager.getControl('Saturday').click()
    >>> manager.getControl('Sunday').click()

Now, for example, September 10th is checked, but the 9th is not:

    >>> print analyze.queryHTML('//input[@id="c9"]', manager.contents)[0]
    <input type="checkbox" name="holiday" class="chk"
           onchange="javascript:update(9)" id="c9" value="2005-09-09">

    >>> print analyze.queryHTML('//input[@id="c10"]', manager.contents)[0]
    <input type="checkbox" name="holiday" class="chk"
           onchange="javascript:update(10)" checked id="c10"
           value="2005-09-10">

Finally, you click on the 'Add term' button.

    >>> manager.getControl('Add term').click()

    >>> manager.url
    'http://localhost/frogpond/terms'
    >>> '2005 Fall' in manager.contents
    True

You can look at it

    >>> manager.getLink('2005 Fall').click()

    # XXX: I don't like this for the test, but libxml2's `fn:contains`
    #      function for XPath seems to always return true :-(

    >>> print analyze.queryHTML('//td[@class="schoolday"]', manager.contents)[1]
    <td class="schoolday">
      <label> 1 </label>
    </td>

    >>> print analyze.queryHTML('//td[@class="holiday"]', manager.contents)[1]
    <td class="holiday">
      <label> 3 </label>
    </td>

You can edit it

    >>> manager.getLink('Edit').click()

    >>> manager.getControl('Title').value
    '2005 Fall'
    >>> manager.getControl('Start date').value
    '2005-09-01'
    >>> manager.getControl('End date').value
    '2005-12-31'

    >>> manager.getControl('Title').value = 'Fall 2005'
    >>> manager.getControl('Start date').value = '2005-08-01'
    >>> manager.getControl('End date').value = '2005-11-30'
    >>> manager.getControl('Save changes').click()

    >>> 'Saved changes' in manager.contents
    True
    >>> manager.getControl('Title').value
    'Fall 2005'
    >>> manager.getControl('Start date').value
    '2005-08-01'
    >>> manager.getControl('End date').value
    '2005-11-30'


TODO: verify that you can delete terms
TODO: check that there's an error message when end date < start date
MAYBE TODO: add an 'Identifier (optional)' field to the term addition form,
            just like in group/resource addition form


Definition of timetable schemas
-------------------------------

We will create a timetable schema using the simple schema definition form:

    >>> manager.getLink('School Timetables').click()
    >>> manager.getLink('New Timetable').click()
    >>> manager.getLink('simple weekly timetable schema').click()

    >>> manager.getControl(name='field.period_name_1').value = 'A'
    >>> manager.getControl(name='field.period_start_1').value = '9:00'
    >>> manager.getControl(name='field.period_finish_1').value = '10:00'

    >>> manager.getControl(name='field.period_name_2').value = 'B'
    >>> manager.getControl(name='field.period_start_2').value = '10:30'
    >>> manager.getControl(name='field.period_finish_2').value = '11:30'

    >>> manager.getControl('Create').click()

Let's look at the new timetable:

    >>> manager.getLink('default').click()

    >>> len(analyze.queryHTML('//th[text()="A"]', manager.contents))
    5
    >>> len(analyze.queryHTML('//th[text()="B"]', manager.contents))
    5

(The more complex timetable schema definition pages are tested in
`ttschema.txt` and `ttschema-wizard.txt`).


Importing timetables
--------------------

We will need to define a person who will be a learner.

    >>> manager.getLink('Persons').click()
    >>> manager.getLink('New Person').click()

    >>> manager.getControl('Full name').value = 'Tadpole'
    >>> manager.getControl('Username').value = 'tadpole'
    >>> manager.getControl('Password').value = 'pwd'
    >>> manager.getControl('Verify password').value = 'pwd'
    >>> manager.getControl('Add').click()

We will also need a course.

    >>> manager.getLink('Courses').click()
    >>> manager.getLink('New Course').click()

    >>> manager.getControl('Title').value = 'Swimming'
    >>> manager.getControl('Add').click()

We can import timetables using the CSV timetable import page.

    >>> manager.getLink('Sections').click()
    >>> manager.getLink('Import Sections').click()

    >>> manager.getControl('CSV File')
    <Control name='csvfile' type='file'>
    >>> manager.getControl('CSV Data')
    <Control name='csvtext' type='textarea'>

As you can see, the form allows to submit the CSV data either by sending the
file or typing/pasting it into a text area field.

    >>> manager.getControl('CSV Data').value = """\
    ... "2005-fall","default"
    ... ""
    ... "swimming","frog"
    ... "Monday","A"
    ... "Tuesday","B"
    ... "***"
    ... "tadpole"
    ... """
    >>> manager.getControl('Submit').click()
    >>> print analyze.queryHTML('//div[@class="info"]', manager.contents)[0]
    <div class="info">
      <p>CSV text imported successfully.</p>
    </div>

A new section should have been created:

    >>> manager.getLink('Sections').click()
    >>> print analyze.queryHTML('//table/tr[2]', manager.contents)[0]
    <tr><td>
        <input type="checkbox" name="delete.swimming--frog"></td>
      <td>
        <a href="http://localhost/frogpond/courses/swimming">Swimming</a>
      </td>
      <td>
        <a href=".../sections/swimming--frog">Swimming - Frog</a>
      </td>
      <td>
    <BLANKLINE>
    <BLANKLINE>
        <a href="http://localhost/frogpond/persons/frog">Frog</a>
    <BLANKLINE>
      </td>
      <td>
    <BLANKLINE>
    <BLANKLINE>
        <a href=".../sections/swimming--frog/timetables/2005-fall.default">2005-Fall.Default</a>
    <BLANKLINE>
      </td>
      <td>
        <span class="hint">
          (1
          <span>Students</span>)
        </span>
      </td>
    </tr>

We should see a timetable in the section's timetable list:

    >>> manager.getLink('Swimming - Frog').click()
    >>> manager.getLink('View Timetables').click()

    >>> manager.getLink('2005-fall.default')
    <Link text='2005-fall.default'
          url='.../sections/swimming--frog/timetables/2005-fall.default'>

We can have a look at the timetable too, and see a few timetable activities:

    >>> manager.getLink('2005-fall.default').click()

    >>> print analyze.queryHTML('//table/tr[2]', manager.contents)[0]
    <tr><th class="period" width="2%">A</th>
          <td class="activity" width="18%">Swimming</td>
    <BLANKLINE>
          <th class="period" width="2%">A</th>
          <td class="activity" width="18%"></td>
    <BLANKLINE>
          <th class="period" width="2%">A</th>
          <td class="activity" width="18%"></td>
    <BLANKLINE>
          <th class="period" width="2%">A</th>
          <td class="activity" width="18%"></td>
    <BLANKLINE>
          <th class="period" width="2%">A</th>
          <td class="activity" width="18%"></td>
        </tr>

    >>> print analyze.queryHTML('//table/tr[3]', manager.contents)[0]
    <tr><th class="period" width="2%">B</th>
          <td class="activity" width="18%"></td>
    <BLANKLINE>
          <th class="period" width="2%">B</th>
          <td class="activity" width="18%">Swimming</td>
    <BLANKLINE>
          <th class="period" width="2%">B</th>
          <td class="activity" width="18%"></td>
    <BLANKLINE>
          <th class="period" width="2%">B</th>
          <td class="activity" width="18%"></td>
    <BLANKLINE>
          <th class="period" width="2%">B</th>
          <td class="activity" width="18%"></td>
        </tr>


Timetables on persons, groups, and resources
--------------------------------------------

Persons, groups and resources should have timetables.

Frog's timetable list can be accessed through a menu item in the main page:

    >>> manager.getLink('Persons').click()
    >>> manager.getLink('Frog').click()
    >>> manager.getLink('View Timetables').click()

We can view the person's timetable list, although it will be empty:

    >>> print analyze.queryHTML('//div[@class="info-block"]',
    ...                         manager.contents)[0]
    <div class="info-block">
        <h3>Timetables</h3>
        <ul></ul></div>

The activities should show up in the calendar:

    >>> manager.open('http://localhost/frogpond/'
    ...              'persons/frog/calendar/2005-09-05')

    >>> print analyze.queryHTML('//h6[fn:contains(text(), "Swimming")]',
    ...                         manager.contents)[0]
    <h6 style="background: #7590ae">
      Swimming
      <span class="start-end">
        (<span>09:00</span>
           -
         <span>10:00</span>)
      </span>
    </h6>

Epilogue
--------

 vim: ft=rest
