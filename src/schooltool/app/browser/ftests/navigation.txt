Navigation
----------

We have a view called 'schooltool_navigation'.  Its output is included in the
page macros template to get the navigation portlet.  Browser requests, such
as used in this functional test, do not represent normal usage.


Set up
------

We will create a resource

    >>> from zope.testbrowser import Browser
    >>> manager = Browser()
    >>> manager.addHeader('Authorization', 'Basic manager:schooltool')
    >>> manager.handleErrors = False
    >>> manager.open('http://localhost/')


Navigation view
---------------

The `schooltool_navigation` view is registered for "*".  It will present
a portlet with the navigation links depending on the authorized user.

    >>> manager.open('http://localhost/')

    >>> print analyze.queryHTML('//a[text()="Persons"]', manager.contents)[0]
    <a href="http://localhost/persons">Persons</a>

    >>> print analyze.queryHTML('//a[text()="Courses"]', manager.contents)[0]
    <a href="http://localhost/courses">Courses</a>

    >>> print analyze.queryHTML('//a[text()="Sections"]', manager.contents)[0]
    <a href="http://localhost/sections">Sections</a>

    >>> print analyze.queryHTML('//a[text()="Resources"]', manager.contents)[0]
    <a href="http://localhost/resources">Resources</a>

    >>> print analyze.queryHTML('//a[text()="Terms"]', manager.contents)[0]
    <a href="http://localhost/terms">Terms</a>

    >>> print analyze.queryHTML('//a[text()="School Timetables"]',
    ...                         manager.contents)[0]
    <a href="http://localhost/ttschemas">School Timetables</a>

    >>> print analyze.queryHTML('//a[text()="Levels"]', manager.contents)[0]
    <a href="http://localhost/levels">Levels</a>

The main technical challenge in this view is finding the nearest
``ISchoolToolApplication`` instance, and providing the links relative to
it.

    >>> manager.open('http://localhost/groups/manager')

    >>> print analyze.queryHTML('//a[text()="Persons"]', manager.contents)[0]
    <a href="http://localhost/persons">Persons</a>

    >>> print analyze.queryHTML('//a[text()="Courses"]', manager.contents)[0]
    <a href="http://localhost/courses">Courses</a>

    >>> print analyze.queryHTML('//a[text()="Sections"]', manager.contents)[0]
    <a href="http://localhost/sections">Sections</a>

    >>> print analyze.queryHTML('//a[text()="Resources"]', manager.contents)[0]
    <a href="http://localhost/resources">Resources</a>

    >>> print analyze.queryHTML('//a[text()="Terms"]', manager.contents)[0]
    <a href="http://localhost/terms">Terms</a>

    >>> print analyze.queryHTML('//a[text()="School Timetables"]',
    ...                         manager.contents)[0]
    <a href="http://localhost/ttschemas">School Timetables</a>

    >>> print analyze.queryHTML('//a[text()="Levels"]', manager.contents)[0]
    <a href="http://localhost/levels">Levels</a>

