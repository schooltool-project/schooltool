Functional doctest for calendaring
==================================

Set up
------

    >>> from zope.testbrowser.testing import Browser
    >>> manager = Browser()
    >>> manager.handleErrors = False
    >>> manager.addHeader('Authorization', 'Basic manager:schooltool')
    >>> manager.open('http://localhost/')
    >>> 'SchoolTool' in manager.contents
    True

Let's create a person so that we can fool around with his calendar:

    >>> manager.getLink('Persons').click()
    >>> manager.getLink('New Person').click()

    >>> manager.getControl('Full name').value = 'Frog'
    >>> manager.getControl('Username').value = 'frog'
    >>> manager.getControl('Password').value = 'pwd'
    >>> manager.getControl('Verify password').value = 'pwd'

    >>> manager.getControl('Add').click()
    >>> 'Frog' in manager.contents
    True

Let's create a second person so that we can test access control.

    >>> manager.getLink('New Person').click()

    >>> manager.getControl('Full name').value = 'Toad'
    >>> manager.getControl('Username').value = 'toad'
    >>> manager.getControl('Password').value = 'doat'
    >>> manager.getControl('Verify password').value = 'doat'

    >>> manager.getControl('Add').click()
    >>> 'Toad' in manager.contents
    True

Also, let's create a group:

    >>> manager.getLink('Groups').click()
    >>> manager.getLink('New Group').click()

    >>> manager.getControl('Title').value = 'Animals'

    >>> manager.getControl('Add').click()
    >>> 'Animals' in manager.contents
    True


Calendar views
--------------

First, let's have a look at the person's empty calendar in iCalendar format.
We should find just a placeholder there.

    >>> frog = Browser()
    >>> frog.handleErrors = False
    >>> frog.open('http://localhost/')
    >>> frog.getLink('Log In').click()
    >>> frog.getControl('Username').value = 'frog'
    >>> frog.getControl('Password').value = 'pwd'
    >>> frog.getControl('Log in').click()

    >>> frog.getLink('My Calendar').click()
    >>> frog.getLink('Open in iCal').click()
    >>> frog.headers['content-type']
    'text/calendar; charset=UTF-8'
    >>> print frog.contents
    <BLANKLINE>
    BEGIN:VCALENDAR
    VERSION:2.0
    PRODID:-//SchoolTool.org/NONSGML SchoolBell//EN
    BEGIN:VEVENT
    UID:empty-calendar-placeholder@schooltool.org
    SUMMARY:Empty calendar
    DTSTART:19700101T000000Z
    DURATION:P0D
    DTSTAMP:...
    END:VEVENT
    END:VCALENDAR
    <BLANKLINE>

Now just the VFREEBUSY component of calendar

    # XXX: Where is the link for this file?
    >>> frog.open('http://localhost/'
    ...           'persons/frog/calendar/calendar.vfb')
    >>> frog.headers['content-type']
    'text/calendar; charset=UTF-8'
    >>> print frog.contents
    <BLANKLINE>
    BEGIN:VCALENDAR
    VERSION:2.0
    PRODID:-//SchoolTool.org/NONSGML SchoolBell//EN
    METHOD:PUBLISH
    BEGIN:VFREEBUSY
    END:VFREEBUSY
    END:VCALENDAR
    <BLANKLINE>

Let's render the weekly calendar view:

    # XXX: There is no link in the app for this URL.
    >>> frog.open('http://localhost/persons/frog/calendar/weekly.html')
    >>> frog.headers['status']
    '200 Ok'

Now let's render the monthly calendar view:

    # XXX: There is no link in the app for this URL.
    >>> frog.open('http://localhost/'
    ...           'persons/frog/calendar/monthly.html')
    >>> frog.headers['status']
    '200 Ok'

The yearly calendar view should also be rendered just fine:

    # XXX: There is no link in the app for this URL.
    >>> frog.open('http://localhost/persons/frog/calendar/yearly.html')
    >>> frog.headers['status']
    '200 Ok'

The daily calendar view works too:

    # XXX: There is no link in the app for this URL.
    >>> frog.open('http://localhost/persons/frog/calendar/daily.html')
    >>> frog.headers['status']
    '200 Ok'

The atom view should be here

    # XXX: There is no link in the app for this URL.
    >>> frog.open('http://localhost/persons/frog/calendar/atom.xml')
    >>> frog.headers['status']
    '200 Ok'
    >>> print frog.contents
    <BLANKLINE>
    ...
    <feed xmlns="http://purl.org/atom/ns#"
    ...
    </feed>

While PDF views will always be disabled when SchoolBell is running as a
content object in Zope 3, it may be possible to enable PDF views for this
test.  We shall try to enable them.

    >>> from schooltool.app.browser.tests.test_pdfcal import tryToSetUpReportLab
    >>> pdf_enabled = tryToSetUpReportLab()

    >>> if pdf_enabled:
    ...     frog.open('http://localhost/'
    ...               'persons/frog/calendar/2005-07-01.pdf')
    ...     '%PDF-1.3' in frog.contents
    ... else:
    ...     True
    True

Let's make sure that the site-wide calendar is rendered, assuming that PDF
support is enabled.

    >>> if pdf_enabled:
    ...     manager.open('http://localhost/calendar/2005-07-01.pdf')
    ...     '%PDF-1.3' in frog.contents
    ... else:
    ...     True
    True

Now we will try disabling PDF views and check if the switch works.

    >>> from schooltool.app.browser import pdfcal
    >>> real_pdfcal_disabled = pdfcal.disabled
    >>> pdfcal.disabled = True

    >>> frog.open('http://localhost/'
    ...           'persons/frog/calendar/2005-07-01.pdf')
    >>> frog.headers['content-type']
    'text/plain;charset=utf-8'
    >>> print frog.contents
    <BLANKLINE>
    PDF support is disabled...

    >>> pdfcal.disabled = real_pdfcal_disabled

The daily view should be the default:

    >>> frog.open('http://localhost/persons/frog/calendar/')
    >>> 'calendar-view-day' in frog.contents
    True

You can also use nice URLs for the calendar views:

    >>> frog.open('http://localhost/persons/frog/calendar/2004-07-15')
    >>> 'calendar-view-day' in frog.contents
    True

    >>> frog.open('http://localhost/persons/frog/calendar/2004-07')
    >>> 'calendar-view-month' in frog.contents
    True


Adding new events
-----------------

Let's add an ordinary event that takes place on 3rd February, 2005:

    >>> frog.getLink('New Event').click()

    >>> frog.getControl('Title').value = 'Sleeping'
    >>> frog.getControl('Date').value = '2005-02-03'
    >>> frog.getControl('Time').value = '01:00'
    >>> frog.getControl('Duration').value = '500'

    >>> frog.getControl('Add').click()

The event should be visible in the daily calendar view:

    >>> frog.open('http://localhost/persons/frog/calendar/2005-02-03')
    >>> 'Sleeping' in frog.contents
    True

We should be able to find the event in the iCalendar view too.  This time,
let's use an aliased URL (directly on the person rather than on the calendar):

    >>> frog.getLink('Open in iCal').click()
    >>> print frog.contents
    <BLANKLINE>
    BEGIN:VCALENDAR
    VERSION:2.0
    PRODID:-//SchoolTool.org/NONSGML SchoolBell//EN
    ...BEGIN:VEVENT
    UID:...
    SUMMARY:Sleeping
    DTSTART:20050203T010000Z
    DURATION:PT8H20M
    DTSTAMP:...
    END:VEVENT...
    END:VCALENDAR
    <BLANKLINE>

And lets make sure that time is listed as BUSY

    >>> frog.open('http://localhost/persons/frog/calendar/calendar.vfb')
    >>> print frog.contents
    <BLANKLINE>
    BEGIN:VCALENDAR
    VERSION:2.0
    PRODID:-//SchoolTool.org/NONSGML SchoolBell//EN
    METHOD:PUBLISH
    BEGIN:VFREEBUSY
    FREEBUSY:20050203T010000/20050203T09200000Z
    END:VFREEBUSY
    END:VCALENDAR
    <BLANKLINE>

Check the other views:

    >>> frog.open('http://localhost/persons/frog/calendar/2005-w05')
    >>> 'Sleeping' in frog.contents
    True

    >>> frog.open('http://localhost/persons/frog/calendar/2005-02')
    >>> 'Sleeping' in frog.contents
    True

    >>> frog.open('http://localhost/persons/frog/calendar/2005')
    >>> 'class="cal_yearly_day_busy">3</a>' in frog.contents
    True

Now let's add an allday event 29th March, 2005:

    >>> frog.getLink('New Event').click()

    >>> frog.getControl('Title').value = 'A Birthday'
    >>> frog.getControl('Date').value = '2005-03-29'
    >>> frog.getControl('All day').click()

    >>> frog.getControl('Add').click()

The event should be visible in the daily calendar view but separate from
normal events

    >>> frog.open('http://localhost/persons/frog/calendar/2005-03-29')
    >>> print frog.contents
    <BLANKLINE>
    ...
    ...A Birthday...
    ...
    ...calendar-view-day...
    ...

We should see it in all the views:

    >>> frog.open('http://localhost/persons/frog/calendar/2005-w13')
    >>> print frog.contents
    <BLANKLINE>
    ...
    ...Current week...
    ...
    <span>A Birthday</span>
    (<span>All day</span>)
    ...

    >>> frog.open('http://localhost/persons/frog/calendar/2005-03')
    >>> print frog.contents
    <BLANKLINE>
    ...
    ...Current month...
    ...
    <span>A Birthday</span>
    (<span>All day</span>)
    ...

    >>> frog.open('http://localhost/persons/frog/calendar/2005')
    >>> print frog.contents
    <BLANKLINE>
    ...
    ...Current year...
    ...
    ...class="cal_yearly_day_busy">3</a>...
    ...
    ...class="cal_yearly_day_busy">29</a>...
    ...


At some point, Frog has to go to bed every night. So a few years down the
road, let's create a recurring event.

    >>> print http(r"""
    ... PUT /persons/frog/calendar/calendar.ics HTTP/1.1
    ... Host: localhost:7080
    ... Authorization: Basic frog:pwd
    ... Content-Type: text/calendar
    ...
    ... BEGIN:VCALENDAR
    ... VERSION:2.0
    ... PRODID:-//SchoolTool.org/NONSGML SchoolBell//EN
    ... BEGIN:VEVENT
    ... UID:sleepdaily@event
    ... SUMMARY:Sleep alot
    ... DTSTART:20070205T100000
    ... DURATION:PT1H
    ... DTSTAMP:20070205T150000
    ... RRULE:FREQ=DAILY;INTERVAL=1
    ... END:VEVENT
    ... END:VCALENDAR
    ... """, handle_errors=False)
    HTTP/1.1 200 Ok
    Content-Length: 0
    Set-Cookie: ...
    <BLANKLINE>


Let's see that in all the views

Daily:

    >>> frog.open('http://localhost/persons/frog/calendar/2007-02-05')
    >>> 'Sleep alot' in frog.contents
    True

It recurs

    >>> frog.open('http://localhost/persons/frog/calendar/2007-02-06')
    >>> 'Sleep alot' in frog.contents
    True

    >>> import re
    >>> frog.open('http://localhost/persons/frog/calendar/2007-w6')
    >>> len(re.findall('Sleep alot', frog.contents))
    14

    >>> frog.open('http://localhost/persons/frog/calendar/2007-02')
    >>> len(re.findall('Sleep alot', frog.contents))
    28

    >>> frog.open('http://localhost/persons/frog/calendar/2007-02')
    >>> len(re.findall('cal_yearly_day_busy', frog.contents))
    55

Let's just check that when we update the form, the duration type last entered
is preserved (regression test for http://issues.schooltool.org/issue197):

    >>> frog.getLink('New Event').click()

    >>> frog.getControl('Title').value = 'A Birthday'
    >>> frog.getControl('Date').value = '2005-03-29'
    >>> frog.getControl('All day').click()
    >>> frog.getControl(name='field.duration_type').value = ['hours']

    >>> frog.getControl('Update form').click()
    >>> '<option value="hours" selected="selected">' in frog.contents
    True

The duration should be set even if form has errors in it:

    >>> frog.getLink('New Event').click()

    >>> frog.getControl('Date').value = '2005-03-29'
    >>> frog.getControl('All day').click()
    >>> frog.getControl(name='field.duration_type').value = ['hours']

    >>> frog.getControl('Add').click()
    >>> '<option value="hours" selected="selected">' in frog.contents
    True


Editing events
--------------

Let's add a calendar through iCalendar PUT view (so we would know the event id):

    >>> print http(r"""
    ... PUT /persons/frog/calendar/calendar.ics HTTP/1.1
    ... Host: localhost:7080
    ... Authorization: Basic frog:pwd
    ... Content-Type: text/calendar
    ...
    ... BEGIN:VCALENDAR
    ... VERSION:2.0
    ... PRODID:-//SchoolTool.org/NONSGML SchoolBell//EN
    ... BEGIN:VEVENT
    ... UID:dummy-uid
    ... SUMMARY:Important event
    ... DTSTART:20050204T100000
    ... DURATION:PT1H
    ... DTSTAMP:20050203T150000
    ... END:VEVENT
    ... END:VCALENDAR
    ... """, handle_errors=False)
    HTTP/1.1 200 Ok
    Content-Length: 0
    Set-Cookie: ...
    <BLANKLINE>

Let's see what the breadcrumbs are for this event:

    >>> frog.open('http://localhost/'
    ...           'persons/frog/calendar/dummy-uid/edit.html')
    >>> print analyze.queryHTML('//div[@class="breadcrumbs"]',
    ...                         frog.contents)[0].replace(u'\u00bb'.encode('UTF-8'), '&#187;')
    <div class="breadcrumbs">
      <a href="http://localhost">SchoolTool</a>
      &#187;
      <a href="http://localhost/persons">persons</a>
      &#187;
      <a href="http://localhost/persons/frog">Frog</a>
      &#187;
      <a href="http://localhost/persons/frog/calendar">Calendar</a>
      &#187;
      <a href="http://localhost/persons/frog/calendar/dummy-uid/edit.html">Important event</a>
    </div>

Let Frog modify this event:

    >>> frog.open('http://localhost/'
    ...           'persons/frog/calendar/dummy-uid/edit.html?date=2005-02-04')
    >>> frog.getControl('Title').value = 'Sleeping'
    >>> frog.getControl('Date').value = '2005-02-03'
    >>> frog.getControl('Time').value = '01:00'
    >>> frog.getControl('Duration').value = '500'
    >>> frog.getControl('Update', index=1).click()

Let's check the new values.  Also, notice that the date value from the
request got into a hidden field:

    >>> frog.open('http://localhost/'
    ...           'persons/frog/calendar/dummy-uid/edit.html')
    >>> 'Sleeping' in frog.contents
    True
    >>> '2005-02-03' in frog.contents
    True
    >>> '01:00' in frog.contents
    True
    >>> '500' in frog.contents
    True

Let's enter some invalid values:

    >>> frog.open('http://localhost/'
    ...           'persons/frog/calendar/dummy-uid/edit.html?date=2005-02-04')

    >>> frog.getControl('Date').value = '20050203'
    >>> frog.getControl('Time').value = '0100'
    >>> frog.getControl('Duration').value = '500h'

    >>> frog.getControl('Update', index=1).click()
    >>> print frog.contents
    <BLANKLINE>
    ...
    ...<input type="hidden" name="date" value="2005-02-04" />
    ...
    ...<input class="textType" id="field.start_date" name="field.start_date" size="20" type="text" value="20050203"  />
    ...<div class="error"><span class="error">Invalid datetime data</span></div>
    ...
    ...<input class="textType" id="field.duration" name="field.duration" size="10" type="text" value="500h"  />
    ...</div>
      <div class="error"><span class="error">Invalid integer data</span></div>
    ...

If we cancel the form - we should be redirected to the day "date" tells us:

    >>> frog.open('http://localhost/'
    ...           'persons/frog/calendar/dummy-uid/edit.html?date=2005-02-07')
    >>> frog.getControl('Cancel').click()

    # XXX: This test says nothing; in fact it shows that this feature does not
    #      work.
    #>>> '2005-02-07' in frog.contents
    #True

Let's change the recurrence of the event a bit more this time:

    >>> frog.open('http://localhost/'
    ...           'persons/frog/calendar/dummy-uid/edit.html')

    >>> frog.getControl('Recurring').click()
    >>> frog.getControl(name='field.recurrence_type').value = ['monthly']
    >>> frog.getControl('1st Thursday of every month').click()
    >>> frog.getControl('Repeat until').click()
    >>> frog.getControl(name='field.until').value = '2005-12-01'

    >>> frog.getControl('Update', index=1).click()

Let's check the new values:

    >>> frog.open('http://localhost/'
    ...           'persons/frog/calendar/dummy-uid/edit.html')

    >>> frog.getControl('Recurring').selected
    True
    >>> frog.getControl(name='field.recurrence_type').value
    ['monthly']
    >>> frog.getControl('1st Thursday of every month').selected
    True
    >>> frog.getControl('Repeat until').selected
    True
    >>> frog.getControl(name='field.until').value
    '2005-12-01'


Uploading iCalendar files
-------------------------

We can try and put an updated calendar:

    >>> print http("""
    ... PUT /persons/frog/calendar/calendar.ics HTTP/1.1
    ... Host: localhost:7080
    ... Authorization: Basic frog:pwd
    ... Content-Type: text/calendar
    ...
    ... BEGIN:VCALENDAR
    ... VERSION:2.0
    ... PRODID:-//SchoolTool.org/NONSGML SchoolBell//EN
    ... BEGIN:VEVENT
    ... UID:empty-calendar-placeholder@schooltool.org
    ... SUMMARY:Empty calendar
    ... DTSTART:20050204T100000
    ... DURATION:PT1H
    ... DTSTAMP:20050203T150000
    ... END:VEVENT
    ... END:VCALENDAR
    ... """, handle_errors=False)
    HTTP/1.1 200 Ok
    Content-Length: 0
    Set-Cookie: ...
    <BLANKLINE>

This should have cleared the calendar.

    >>> frog.open('http://localhost/persons/frog/calendar/2005-02-03')
    >>> 'Sleeping' in frog.contents
    False


Calendar overlaying
-------------------

Let's allow frog to see all calendars:

    # XXX: This URL is not accessible via the browser!! Eeek!
    #      / will forward you to /calendar
    #      We should be able to say:
    #        >>> manager.open('http://localhost/')
    #        >>> manager.getLink('Set Up Access').click()
#     >>> manager.open('http://localhost/acl.html')

#     >>> frog_settings = manager.getControl(name='sb.person.frog')
#     >>> frog_settings.value = ['schooltool.viewCalendar', 'schooltool.view']

#     >>> manager.getControl('Set Access', index=1).click()

SchoolTool lets users overlay calendars of other users and groups, and see all
calendar events in one view.  When you are logged in, and you look at your own
calendar, you will see a new portlet on the left:

    >>> frog.getLink('My Calendar').click()
    >>> print frog.contents
    <BLANKLINE>
    ...
      <div id="portlet-calendar-overlay" class="portlet">
    <BLANKLINE>
      <h4>Calendars</h4>
    <BLANKLINE>
    ...
            <td style="width: 100%">My Calendar</td>
    ...
          <input name="OVERLAY_APPLY" type="submit"
                 value="Apply" />
          <input name="OVERLAY_MORE" type="submit"
                 value="More..." />
    ...
      </form>
    </div>
    ...

Initially it contains only your own calendar.  You can click on "More..."
and add other calendars to this list.

    >>> frog.getControl('More...').click()

    >>> frog.getControl('Toad').click()
    >>> frog.getControl('Animals').click()
    >>> frog.getControl('Apply').click()

Now, you can see three calendars in the overlay portlet, animals, toad and the
application calendar

    >>> frog.getLink('My Calendar').click()
    >>> 'Animals' in frog.contents
    True
    >>> 'Toad' in frog.contents
    True
    >>> print analyze.queryHTML('//td[text()="SchoolTool"]', frog.contents)[0]
    <td style="width: 100%">SchoolTool</td>

Let's remove the application calendar from the overlay

    >>> frog.getControl('More...').click()

    >>> frog.getControl('SchoolTool site-wide calendar').click()
    >>> frog.getControl('Apply').click()

Now the application calendar is no longer in the overlay portlet

    >>> frog.getLink('My Calendar').click()
    >>> analyze.queryHTML('//td[text()="SchoolTool"]', frog.contents)
    []

# If we restrict permissions on the application calendar, it will no longer be
# available in the overlay selection view:

#   Demonstrate that it is there now:

#     >>> frog.getControl('More...').click()
#     >>> frog.getControl('SchoolTool site-wide calendar')
#     <ItemControl name='application' type='checkbox' optionValue='application'>

#   Restrict permissions on the application calendar

#     >>> manager.open('http://localhost')
#     >>> manager.getLink('Set Up Access').click()

#     >>> frog_settings = manager.getControl(name='sb.person.frog')
#     >>> frog_settings.value = []
#     >>> manager.getControl('Set Access', index=1).click()

#   And now it's gone

#     >>> frog.reload()
#     >>> frog.getControl('SchoolTool site-wide calendar')
#     Traceback (most recent call last):
#     ...
#     LookupError: label 'SchoolTool site-wide calendar'

Regression test for Issue243 (Calendars with identical titles are
throwing system error):

    >>> frog.getLink('My Calendar').click()
    >>> len(analyze.queryHTML('//td[text()="Toad"]', frog.contents))
    1

Rename the group so its title would be Toad:

    >>> manager.open('http://localhost')
    >>> manager.getLink('Groups').click()
    >>> manager.getLink('Animals').click()
    >>> manager.getLink('Edit Info').click()

    >>> manager.getControl('Title').value = 'Toad'
    >>> manager.getControl('Apply').click()

Calendars with identical titles will get sorted in random order so I
am just checking that they are there:

    >>> frog.reload()
    >>> len(analyze.queryHTML('//td[text()="Toad"]', frog.contents))
    2

Rename the group back to Animals:

    >>> manager.getLink('Edit Info').click()
    >>> manager.getControl('Title').value = 'Animals'
    >>> manager.getControl('Apply').click()

Now, if there are events in the animals' and toad's calendars, you can
see them:

    >>> manager.getLink('Persons').click()
    >>> manager.getLink('Toad').click()
    >>> manager.getLink('View Calendar').click()
    >>> manager.getLink('New Event').click()

    >>> manager.getControl('Title').value = 'Eat flies'
    >>> manager.getControl('Date').value = '2005-02-03'
    >>> manager.getControl('Time').value = '09:00'
    >>> manager.getControl('Duration').value = '30'
    >>> manager.getControl('Add').click()

    >>> manager.getLink('SchoolTool').click()
    >>> manager.getLink('Groups').click()
    >>> manager.getLink('Animals').click()
    >>> manager.getLink('View Calendar').click()
    >>> manager.getLink('New Event').click()

    >>> manager.getControl('Title').value = 'Daily meeting'
    >>> manager.getControl('Date').value = '2005-02-03'
    >>> manager.getControl('Time').value = '10:00'
    >>> manager.getControl('Duration').value = '30'
    >>> manager.getControl('Add').click()

    >>> frog.open('http://localhost/persons/frog/calendar/2005-02-03')
    >>> 'Eat flies' in frog.contents
    True
    >>> 'Daily meeting' in frog.contents
    True

# If the permissions to overlaid calendars are revoked, you can still
# see your calendar, albeit without overlaid events:

#     # XXX: This URL is not accessible via the browser!! Eeek!
#     #       will forward you to /calendar
#     #      We should be able to say:
#     #        >>> manager.open('http://localhost/')
#     #        >>> manager.getLink('Set Up Access').click()
#     >>> manager.open('http://localhost/acl.html')

#     >>> frog_settings = manager.getControl(name='sb.person.frog')
#     >>> frog_settings.value = ['schooltool.view']

#     >>> manager.getControl('Set Access', index=1).click()

#     >>> frog.open('http://localhost/persons/frog/calendar/2005-02-03')
#     >>> frog.headers['status']
#     '200 Ok'


The Tomorrow's events box
-------------------------

Warning, this test might break if run exactly at midnight, as the
value of 'tomorrow' jumps to the next day.

First of all, what is tomorrow?

    >>> from datetime import date
    >>> tomorrow = date.today() + date.resolution

Now, let's add an event which will take place tomorrow:

    >>> frog.getLink('My Calendar').click()
    >>> frog.getLink('New Event').click()

    >>> frog.getControl('Title').value = 'Important meeting'
    >>> frog.getControl('Date').value = str(tomorrow)
    >>> frog.getControl('Time').value = '12:00'
    >>> frog.getControl('Duration').value = '60'
    >>> frog.getControl('Add').click()

We should see it in the calendar for today:

    >>> frog.getLink('My Calendar').click()
    >>> print frog.contents
    <BLANKLINE>
    ...
    <div id="portlet-next-day-events" class="portlet">
      <h4>Tomorrow's Events</h4>
      <ul>
    <BLANKLINE>
         <li>
           <a href="...
              title="Important meeting"
              style="color: #7590ae">
             <strong>12:00</strong>
             Important meeti...
           </a>
         </li>
    <BLANKLINE>
      </ul>
    </div>
    ...


Now, let's take a look at the daily calendar for an arbitrary day.  It
should have the event we have just created in the Tomorrow's events box.

    >>> frog.open('http://localhost/persons/frog/calendar/2005-01-01')
    >>> print frog.contents
    <BLANKLINE>
    ...
         <div id="portlet-next-day-events" class="portlet">
           <h4>Tomorrow's Events</h4>
           <ul>
    <BLANKLINE>
             <li>
               <a href="...
                  title="Important meeting"
                  style="color: #7590ae">
                 <strong>12:00</strong>
                 Important meeti...
               </a>
             </li>
    <BLANKLINE>
           </ul>
         </div>
    ...


A Sunbird weekly recurrence workaround
======================================

It seems that Mozilla Calendar does not include the weekday of the
first occurence of the event to the BYDAY list of weekdays the event
recurs on.  So, in the recurrence editing form, we must always
consider the weekday of the first recurrence of the event to be on, by
adding a hidden input field beside a disabled checkbox:

Let's add an event on 2005-01-01 (Saturday) that recurs on Tuesdays,
too.  Notice we don't mark Saturday in the BYDAY list:

    >>> print http(r"""
    ... PUT /persons/frog/calendar/calendar.ics HTTP/1.1
    ... Host: localhost:7080
    ... Authorization: Basic frog:pwd
    ... Content-Type: text/calendar
    ...
    ... BEGIN:VCALENDAR
    ... VERSION:2.0
    ... PRODID:-//SchoolTool.org/NONSGML SchoolBell//EN
    ... BEGIN:VEVENT
    ... UID:important@event
    ... SUMMARY:Important event
    ... DTSTART:20050101T100000
    ... DURATION:PT1H
    ... DTSTAMP:20050203T150000
    ... RRULE:FREQ=WEEKLY;BYDAY=TU;INTERVAL=1
    ... END:VEVENT
    ... END:VCALENDAR
    ... """, handle_errors=False)
    HTTP/1.1 200 Ok
    Content-Length: 0
    Set-Cookie: ...
    <BLANKLINE>

Now, let's get this event and see its RRULE:

    >>> frog.open('http://localhost/'
    ...           'persons/frog/calendar/calendar.ics')
    >>> print frog.contents
    <BLANKLINE>
    ...
    SUMMARY:Important event
    RRULE:FREQ=WEEKLY;BYDAY=TU,SA;INTERVAL=1
    ...
