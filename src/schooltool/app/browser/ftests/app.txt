Functional doctest for SchoolTool
=================================

This is a functional doctest for schooltool.  To find out more about
functional doctests, read Zope3/src/zope/app/ftests/doctest.txt


SchoolTool as a Zope 3 content object
-------------------------------------

First, we'll go to the Zope 3 management interface and verify that you can add
SchoolTool instances from the add menu.

    >>> from zope.testbrowser import Browser
    >>> manager = Browser()
    >>> manager.addHeader('Authorization', 'Basic mgr:mgrpw')

    >>> manager.handleErrors = False
    >>> manager.open('http://localhost/contents.html')
    >>> print manager.contents
    <!DOCTYPE ...>
    ...
    <h4>Add:</h4>
    ...
    <a href="http://localhost/@@contents.html?type_name=..."
       class="">SchoolTool</a>
    ...

We will obviously need a SchoolTool instance.

    >>> manager.getLink('SchoolTool').click()
    >>> manager.getControl(name='new_value').value = 'frogpond'
    >>> manager.getControl('Apply').click()

    >>> 'frogpond' in manager.contents
    True

The SchoolTool version is displayed on the page:

    >>> manager.getLink('frogpond').click()

    >>> import schooltool
    >>> str(manager.contents).count(schooltool.VERSION) > 0
    True

Let's create a person so that we can fool around with his calendar:

    >>> manager.getLink('Persons').click()
    >>> manager.getLink('New Person').click()

    >>> manager.getControl('Full name').value = 'Frog'
    >>> manager.getControl('Username').value = 'frog'
    >>> manager.getControl('Password').value = 'pwd'
    >>> manager.getControl('Verify password').value = 'pwd'
    >>> manager.getControl('Add').click()

    >>> 'Frog' in manager.contents
    True

Let's create a second person so that we can test access control.

    >>> manager.getLink('New Person').click()

    >>> manager.getControl('Full name').value = 'Toad'
    >>> manager.getControl('Username').value = 'toad'
    >>> manager.getControl('Password').value = 'doat'
    >>> manager.getControl('Verify password').value = 'doat'
    >>> manager.getControl('Add').click()

    >>> 'Toad' in manager.contents
    True

Also, let's create a group:

    >>> manager.getLink('Groups').click()
    >>> manager.getLink('New Group').click()

    >>> manager.getControl('Title').value = 'Animals'
    >>> manager.getControl('Add').click()

    >>> 'Animals' in manager.contents
    True

Now we log in as the frog:

    >>> frog = Browser()
    >>> frog.open('http://localhost/frogpond/')
    >>> frog.getLink('Log In').click()
    >>> frog.getControl('Username').value = 'frog'
    >>> frog.getControl('Password').value = 'pwd'
    >>> frog.getControl('Log in').click()

We should be redirected from the index page to the calendar

    >>> frog.url
    'http://localhost/frogpond/persons/frog/calendar'

And we should have permission to see the calendar:

    >>> frog.headers['status']
    '200 Ok'

The daily view should be the default for a person's calendar:

    >>> frog.getLink('My Calendar').click()
    >>> 'calendar-view-day' in frog.contents
    True

Let's make sure that we can see the SchoolTool preferences page:

    >>> frog.getLink('Frog').click()
    >>> frog.getLink('Change Preferences').click()
    >>> 'cal_periods' in frog.contents
    True

We should be able to see terms and schemas without authenticating:

    >>> anonymous = Browser()
    >>> anonymous.open('http://localhost/frogpond/terms')
    >>> anonymous.headers['status']
    '200 Ok'

    >>> anonymous.open('http://localhost/frogpond/ttschemas')
    >>> anonymous.headers['status']
    '200 Ok'

But you have to log in to see persons, groups, and other locations:

    >>> anonymous.open('http://localhost/frogpond/persons')
    >>> print anonymous.url
    http://localhost/frogpond/@@login.html?forbidden=yes&nexturl=...

    >>> anonymous.open('http://localhost/frogpond/groups')
    >>> print anonymous.url
    http://localhost/frogpond/@@login.html?forbidden=yes&nexturl=...

    >>> anonymous.open('http://localhost/frogpond/resources')
    >>> print anonymous.url
    http://localhost/frogpond/@@login.html?forbidden=yes&nexturl=...

The section container view points to the timetable import form:

    >>> manager.open('http://localhost/frogpond/sections')
    >>> print manager.contents
    <!DOCTYPE ...>
    ...
    ...<a href="@@timetables-csvimport.html">Import Sections</a>...
    ...

This is a school, so we should add some courses

    >>> manager.getLink('Courses').click()
    >>> manager.getLink('New Course').click()
    >>> manager.getControl('Title').value = 'History'
    >>> manager.getControl('Add').click()

    >>> 'History' in manager.contents
    True

Let's see that course:

    >>> manager.getLink('History').click()
    >>> 'History' in manager.contents
    True

Lets create a section to add to that course:

    >>> manager.getLink('New Section').click()
    >>> manager.getControl('Code').value = 'HIS1'
    >>> manager.getControl('Description').value = 'Section1'
    >>> manager.getControl('Add').click()

Notice we got redirected to the course we added the section to.

    >>> print manager.contents
    <!DOCTYPE ...>
    ...
    ...History...
    ...
    ...<h3>Sections</h3>
    ...
    ...<p>Section1</p>
    ...

Looking at the section:

    >>> manager.getLink('(HIS1)').click()
    >>> print manager.contents
    <!DOCTYPE ...>
    ...
    ...Section of
    <BLANKLINE>
          <a href="http://localhost/frogpond/courses/history">History</a>
    <BLANKLINE>
    ...
    ...change location...
    ...

Students aren't given the option to change the location:

    >>> frog.open('http://localhost/frogpond/sections/his1')
    >>> frog.headers['status']
    '200 Ok'
    >>> "change location" not in frog.contents
    True

The section's edit view:

    >>> print http(r"""
    ... GET /frogpond/sections/his1/@@edit.html HTTP/1.1
    ... Authorization: Basic mgr:mgrpw
    ... """)
    HTTP/1.1 200 Ok
    ...

Frog can't see the section's calendar by default

    >>> frog.open('http://localhost/frogpond/sections/his1/calendar')
    >>> print frog.url
    http://localhost/frogpond/@@login.html?forbidden=yes&nexturl=...

Frog's overlay portlet has just his own calendar:

    >>> frog.getLink('My Calendar').click()
    >>> print frog.contents
    <!DOCTYPE ...>
    ...
        <table class="overlays">
    <BLANKLINE>
          <tr>
            <th style="text-align: center">
              <acronym title="Personal calendar">Cal</acronym>
            </th>
            <th><acronym title="Timetable calendar">TT</acronym></th>
            <th></th>
            <th></th>
          </tr>
    <BLANKLINE>
          <tr style="background: #9db8d2">
            <td><input type="checkbox" checked="checked" disabled="disabled" /></td>
            <td><input type="checkbox" name="my_timetable"
                       checked="checked" /></td>
            <td style="width: 100%">My Calendar</td>
            <td></td>
          </tr>
    <BLANKLINE>
        </table>
    ...

Adding a teacher:

    >>> manager.getLink('edit instructors').click()
    >>> manager.getControl(name='add_instructor.frog').value = True
    >>> manager.getControl('Add').click()

    >>> print manager.contents
    <BLANKLINE>
    ...
      <legend>Current Instructors</legend>
    ...
    Frog
    ...
      <legend>Available Instructors</legend>
    ...

Now Frog is in the Instructors div

    >>> manager.getControl('Cancel').click()
    >>> print manager.contents
    <!DOCTYPE ...>
    ...
    ...Section of
    <BLANKLINE>
          <a href="http://localhost/frogpond/courses/history">History</a>
    <BLANKLINE>
    ...
          <h3>Instructors</h3>
          <ul>
            <li>
              <a href="http://localhost/frogpond/persons/frog">Frog</a>
            </li>
          </ul>
    ...

Frog can see the calendar now

    >>> frog.open('http://localhost/frogpond/sections/his1/calendar')
    >>> 'Calendar for HIS1' in frog.contents
    True

And Frog's overlay portlet shows the section:

    >>> frog.getLink('My Calendar').click()
    >>> print frog.contents
    <!DOCTYPE ...>
    ...
        <table class="overlays">
    <BLANKLINE>
          <tr>
            <th style="text-align: center">
              <acronym title="Personal calendar">Cal</acronym>
            </th>
            <th><acronym title="Timetable calendar">TT</acronym></th>
            <th></th>
            <th></th>
          </tr>
    <BLANKLINE>
          <tr style="background: #9db8d2">
            <td><input type="checkbox" checked="checked" disabled="disabled" /></td>
            <td><input type="checkbox" name="my_timetable"
                       checked="checked" /></td>
            <td style="width: 100%">My Calendar</td>
            <td></td>
          </tr>
    <BLANKLINE>
          <tr style="background: #eed680">
            <td><input type="checkbox" name="overlay:list"
                       checked="checked"
                       value="/frogpond/sections/his1" /></td>
            <td><input type="checkbox"
                       name="overlay_timetables:list"
                       checked="checked"
                       value="/frogpond/sections/his1" /></td>
            <td style="width: 100%">Frog -- History</td>
            <td><a class="go"
                   style="background: #d1940c;
                color: #d1940c"
                   href="http://localhost/frogpond/sections/his1/calendar">&nbsp;</a></td>
        </tr>
        </table>
    ...


If we fire Frog, in hopes of getting Salamander to step in:

    >>> manager.getLink('edit instructors').click()
    >>> manager.getControl(name='remove_instructor.frog').value = True
    >>> manager.getControl('Remove').click()

Frog can't see the section's calendar any more

    >>> frog.open('http://localhost/frogpond/sections/his1/calendar')
    >>> print frog.url
    http://localhost/frogpond/@@login.html?forbidden=yes&nexturl=...

and he's no longer an instructor:

    >>> manager.getControl('Cancel').click()
    >>> print manager.contents
    <!DOCTYPE ...>
    ...
          <h3>Instructors</h3>
          <ul>
          </ul>
    ...

And the section's calendar is no longer in his overlay portlet.

    >>> frog.getLink('My Calendar').click()
    >>> print frog.contents
    <!DOCTYPE ...>
    ...
        <table class="overlays">
    <BLANKLINE>
          <tr>
            <th style="text-align: center">
              <acronym title="Personal calendar">Cal</acronym>
            </th>
            <th><acronym title="Timetable calendar">TT</acronym></th>
            <th></th>
            <th></th>
          </tr>
    <BLANKLINE>
          <tr style="background: #9db8d2">
            <td><input type="checkbox" checked="checked" disabled="disabled" /></td>
            <td><input type="checkbox" name="my_timetable"
                       checked="checked" /></td>
            <td style="width: 100%">My Calendar</td>
            <td></td>
          </tr>
    <BLANKLINE>
        </table>
    ...

Adding a student:

    >>> manager.getLink('edit individuals').click()
    >>> manager.getControl(name='member.toad').value = True
    >>> manager.getControl('Apply').click()

Now toad is in the Students div

    >>> print manager.contents
    <BLANKLINE>
    ...
    ...Section of
    <BLANKLINE>
        <a href="http://localhost/frogpond/courses/history">History</a>
    <BLANKLINE>
    ...
          <h3>Students</h3>
          <ul>
            <li class="individual">
              <a href="http://localhost/frogpond/persons/toad">Toad</a>
            </li>
          </ul>
    ...


Epilogue
--------

 vim: ft=rest
