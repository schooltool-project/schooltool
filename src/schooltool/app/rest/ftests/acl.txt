Functional tests for SchoolBell ACL ReSTive view
================================================

When you get an object's access control list, you see a list of <principal>
elements with a fixed set of <permission> elements inside each.  For example,
let's look at the permissions by default assigned to the person list:

    >>> response = rest("""
    ... GET /persons/acl HTTP/1.1
    ... Authorization: Basic manager:schooltool
    ... """, handle_errors=False)
    >>> print response
    HTTP/1.1 200 Ok
    Content-Length: ...
    Content-Type: text/html;charset=utf-8
    Set-Cookie: ...
    <BLANKLINE>
    <acl xmlns="http://schooltool.org/ns/model/0.1">
      <principal id="zope.Authenticated">
          <permission setting="on" id="schooltool.view" />
          <permission id="schooltool.edit" />
          <permission id="schooltool.create" />
          <permission id="schooltool.viewCalendar" />
          <permission id="schooltool.addEvent" />
          <permission id="schooltool.modifyEvent" />
          <permission id="schooltool.controlAccess" />
          <permission id="schooltool.manageMembership" />
      </principal>
      <principal id="zope.Anybody">
          <permission id="schooltool.view" />
          <permission id="schooltool.edit" />
          <permission id="schooltool.create" />
          <permission id="schooltool.viewCalendar" />
          <permission id="schooltool.addEvent" />
          <permission id="schooltool.modifyEvent" />
          <permission id="schooltool.controlAccess" />
          <permission id="schooltool.manageMembership" />
      </principal>
      ...
    </acl>
    <BLANKLINE>

There are two predefined principals -- zope.Authenticated (permissions granted
to this principal will apply to any authenticated user) and zope.Anybody
(permissions granted to this principal will apply to everyone).  Each user and
group is also a principal.

    >>> from schooltool.xmlparsing import XMLDocument
    >>> def extract_principals(response):
    ...     doc = XMLDocument(response.getBody())
    ...     doc.registerNs('st', 'http://schooltool.org/ns/model/0.1')
    ...     return dict((p['id'], p) for p in doc.query('/st:acl/st:principal'))
    >>> all_principals = extract_principals(response)

For example, the 'manager' user has all permissions by default.  Note how the
'id' attribute is constructed from the username.

    >>> print all_principals['sb.person.manager']
    <principal id="sb.person.manager">
        <permission setting="on" id="schooltool.view"/>
        <permission setting="on" id="schooltool.edit"/>
        <permission setting="on" id="schooltool.create"/>
        <permission setting="on" id="schooltool.viewCalendar"/>
        <permission setting="on" id="schooltool.addEvent"/>
        <permission setting="on" id="schooltool.modifyEvent"/>
        <permission setting="on" id="schooltool.controlAccess"/>
        <permission setting="on" id="schooltool.manageMembership"/>
    </principal>

And here is the 'Manager' group, which has no permissions by default.  Note how
the 'id' attribute is constructed from the group name.

    >>> print all_principals['sb.group.manager']
    <principal id="sb.group.manager">
        <permission id="schooltool.view"/>
        <permission id="schooltool.edit"/>
        <permission id="schooltool.create"/>
        <permission id="schooltool.viewCalendar"/>
        <permission id="schooltool.addEvent"/>
        <permission id="schooltool.modifyEvent"/>
        <permission id="schooltool.controlAccess"/>
        <permission id="schooltool.manageMembership"/>
    </principal>

Now, let's create some groups and persons:

    >>> print rest("""
    ... POST /groups/ HTTP/1.1
    ... Authorization: Basic manager:schooltool
    ... Content-Type: text/xml
    ...
    ... <object xmlns="http://schooltool.org/ns/model/0.1" title="A Group"/>
    ... """)
    HTTP/1.1 201 Created
    ...
    Location: http://localhost/groups/a-group
    Set-Cookie: ...
    <BLANKLINE>
    Object created: http://localhost/groups/a-group

    >>> print rest("""
    ... PUT /persons/john HTTP/1.1
    ... Authorization: Basic manager:schooltool
    ... Content-Type: text/xml
    ...
    ... <object xmlns="http://schooltool.org/ns/model/0.1" title="John"/>
    ... """)
    HTTP/1.1 201 Created
    ...

    >>> print rest("""
    ... PUT /persons/john/password HTTP/1.1
    ... Authorization: Basic manager:schooltool
    ...
    ... ann
    ... """)
    HTTP/1.1 200 Ok
    Content-Length: 0
    Set-Cookie: ...
    <BLANKLINE>

Now, the ACL view should include those new principals as well:

    >>> response = rest("""
    ... GET /persons/acl HTTP/1.1
    ... Authorization: Basic manager:schooltool
    ... """, handle_errors=False)
    >>> print response
    HTTP/1.1 200 Ok
    Content-Length: ...
    Content-Type: text/html;charset=utf-8
    Set-Cookie: ...
    <BLANKLINE>
    <acl xmlns="http://schooltool.org/ns/model/0.1">
      ...
    </acl>

    >>> all_principals = extract_principals(response)
    >>> print all_principals['sb.group.a-group']
    <principal id="sb.group.a-group">
        <permission id="schooltool.view"/>
        <permission id="schooltool.edit"/>
        <permission id="schooltool.create"/>
        <permission id="schooltool.viewCalendar"/>
        <permission id="schooltool.addEvent"/>
        <permission id="schooltool.modifyEvent"/>
        <permission id="schooltool.controlAccess"/>
        <permission id="schooltool.manageMembership"/>
    </principal>

    >>> print all_principals['sb.person.john']
    <principal id="sb.person.john">
        <permission setting="on" id="schooltool.view"/>
        <permission id="schooltool.edit"/>
        <permission id="schooltool.create"/>
        <permission id="schooltool.viewCalendar"/>
        <permission id="schooltool.addEvent"/>
        <permission id="schooltool.modifyEvent"/>
        <permission id="schooltool.controlAccess"/>
        <permission id="schooltool.manageMembership"/>
    </principal>


John cannot see the permissions, though:

    >>> print rest("""
    ... GET /persons/acl HTTP/1.1
    ... Authorization: Basic john:ann
    ... """)
    HTTP/1.1 401 Unauthorized
    ...


John can not set the permissions as well:

    >>> print rest("""
    ... POST /persons/acl HTTP/1.1
    ... Authorization: Basic john:ann
    ...
    ... <acl xmlns="http://schooltool.org/ns/model/0.1">
    ...   <principal id="sb.group.a-group">
    ...     <permission id="schooltool.view" />
    ...     <permission id="schooltool.edit" />
    ...     <permission id="schooltool.create" />
    ...     <permission id="schooltool.viewCalendar" />
    ...     <permission id="schooltool.addEvent" />
    ...     <permission id="schooltool.modifyEvent" />
    ...     <permission id="schooltool.controlAccess" />
    ...     <permission id="schooltool.manageMembership" />
    ...   </principal>
    ... </acl>
    ... """)
    HTTP/1.1 401 Unauthorized
    ...


Let's change some permissions and grant John the right to manage
permissions.  Note that you do not need to upload the full list of
principals.  Only those principals that you mention will have their
permissions changed.

    >>> print rest("""
    ... POST /persons/acl HTTP/1.1
    ... Authorization: Basic manager:schooltool
    ...
    ... <acl xmlns="http://schooltool.org/ns/model/0.1">
    ...   <principal id="sb.group.a-group">
    ...     <permission id="schooltool.view" />
    ...     <permission id="schooltool.edit" />
    ...     <permission id="schooltool.create" />
    ...     <permission id="schooltool.viewCalendar" setting="on" />
    ...     <permission id="schooltool.addEvent" />
    ...     <permission id="schooltool.modifyEvent" />
    ...     <permission id="schooltool.controlAccess" />
    ...     <permission id="schooltool.manageMembership" />
    ...   </principal>
    ...   <principal id="sb.person.john">
    ...     <permission id="schooltool.view" />
    ...     <permission id="schooltool.edit" />
    ...     <permission id="schooltool.create" />
    ...     <permission id="schooltool.viewCalendar" />
    ...     <permission id="schooltool.addEvent" />
    ...     <permission id="schooltool.modifyEvent" />
    ...     <permission id="schooltool.controlAccess" setting="on" />
    ...     <permission id="schooltool.manageMembership" setting="on" />
    ...   </principal>
    ... </acl>
    ... """)
    HTTP/1.1 200 Ok
    Content-Length: ...
    Set-Cookie: ...
    <BLANKLINE>
    Permissions updated

Though if you will skip a <permission> element it will default to
unset.  For example, here we set only the controlAccess permission and
implicitly unset manageMembership:

    >>> print rest("""
    ... POST /persons/acl HTTP/1.1
    ... Authorization: Basic manager:schooltool
    ...
    ... <acl xmlns="http://schooltool.org/ns/model/0.1">
    ...   <principal id="sb.person.john">
    ...     <permission id="schooltool.controlAccess" setting="on" />
    ...   </principal>
    ... </acl>
    ... """)
    HTTP/1.1 200 Ok
    Content-Length: ...
    Set-Cookie: ...
    <BLANKLINE>
    Permissions updated

Now, the permissions are changed and John can see them:

    >>> response = rest("""
    ... GET /persons/acl HTTP/1.1
    ... Authorization: Basic john:ann
    ... """)
    >>> print response
    HTTP/1.1 200 Ok
    Content-Length: ...
    Content-Type: text/html;charset=utf-8
    Set-Cookie: ...
    ...
    <BLANKLINE>
    <acl xmlns="http://schooltool.org/ns/model/0.1">
    ...
    </acl>

    >>> all_principals = extract_principals(response)
    >>> print all_principals['sb.person.john']
    <principal id="sb.person.john">
        <permission id="schooltool.view"/>
        <permission id="schooltool.edit"/>
        <permission id="schooltool.create"/>
        <permission id="schooltool.viewCalendar"/>
        <permission id="schooltool.addEvent"/>
        <permission id="schooltool.modifyEvent"/>
        <permission setting="on" id="schooltool.controlAccess"/>
        <permission id="schooltool.manageMembership"/>
    </principal>

And John can modify the permissions:

    >>> print rest("""
    ... POST /persons/acl HTTP/1.1
    ... Authorization: Basic john:ann
    ...
    ... <acl xmlns="http://schooltool.org/ns/model/0.1">
    ...   <principal id="sb.group.a-group">
    ...     <permission id="schooltool.view" />
    ...     <permission id="schooltool.edit" />
    ...     <permission id="schooltool.create" />
    ...     <permission id="schooltool.viewCalendar" />
    ...     <permission id="schooltool.addEvent" />
    ...     <permission id="schooltool.modifyEvent" />
    ...     <permission id="schooltool.controlAccess" />
    ...     <permission id="schooltool.manageMembership" />
    ...   </principal>
    ... </acl>
    ... """)
    HTTP/1.1 200 Ok
    ...
    <BLANKLINE>
    Permissions updated

The ACL views work everywhere:

    >>> print rest("""
    ... GET /acl HTTP/1.1
    ... Authorization: Basic manager:schooltool
    ... """)
    HTTP/1.1 200 Ok
    ...

    >>> print rest("""
    ... GET /persons/acl HTTP/1.1
    ... Authorization: Basic manager:schooltool
    ... """)
    HTTP/1.1 200 Ok
    ...

    >>> print rest("""
    ... GET /groups/acl HTTP/1.1
    ... Authorization: Basic manager:schooltool
    ... """)
    HTTP/1.1 200 Ok
    ...

    >>> print rest("""
    ... GET /groups/a-group/acl HTTP/1.1
    ... Authorization: Basic manager:schooltool
    ... """)
    HTTP/1.1 200 Ok
    ...

    >>> print rest("""
    ... GET /groups/a-group/calendar/acl HTTP/1.1
    ... Authorization: Basic manager:schooltool
    ... """)
    HTTP/1.1 200 Ok
    ...

    >>> print rest("""
    ... GET /persons/john/acl HTTP/1.1
    ... Authorization: Basic manager:schooltool
    ... """)
    HTTP/1.1 200 Ok
    ...

    >>> print rest("""
    ... GET /persons/john/calendar/acl HTTP/1.1
    ... Authorization: Basic manager:schooltool
    ... """)
    HTTP/1.1 200 Ok
    ...

