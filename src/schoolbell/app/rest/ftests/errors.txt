Error handling in REST views
============================

First of all, we will need a schoolbell instance.  We will add it via
the web ZMI:

    >>> print http("""
    ... POST /@@contents.html HTTP/1.1
    ... Authorization: Basic mgr:mgrpw
    ... Content-Length: 81
    ... Content-Type: application/x-www-form-urlencoded
    ...
    ... type_name=BrowserAdd__schoolbell.app.app.SchoolBellApplication&\
    ... new_value=frogpond""", handle_errors=False)
    HTTP/1.1 303 See Other
    ...
    Location: http://localhost/@@contents.html
    ...

Also, we need the REST HTTP caller:

    >>> from schoolbell.app.rest.ftests import rest

We need to shut up libxml2, so it does not spew errors to stderr:

   >>> import libxml2
   >>> libxml2.registerErrorHandler(lambda ctx, error: None, None)
   1

Now, let's submit a well formed but invalid XML document:

    >>> print rest("""
    ... POST /frogpond/groups HTTP/1.1
    ...
    ... <hello>world</hello>
    ... """)
    HTTP/1.1 400 Bad Request
    Content-Length: 34
    Content-Type: text/plain; charset=utf-8
    <BLANKLINE>
    XML not valid according to schema.

A not-well formed document:

    >>> print rest("""
    ... POST /frogpond/groups HTTP/1.1
    ...
    ... <what's going on?
    ... """)
    HTTP/1.1 400 Bad Request
    Content-Length: 24
    Content-Type: text/plain; charset=utf-8
    <BLANKLINE>
    Ill-formed XML document.


Tear down
=========

Restore the libxml2 error handling:

     >>> import sys
     >>> def on_error_callback(ctx, msg):
     ...     sys.stderr.write(msg)
     >>> libxml2.registerErrorHandler(on_error_callback, None)
     1
