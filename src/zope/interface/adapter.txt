================
Adapter Registry
================

Adapter registries provide a way to register objects that depend on
one or more interface specifications and provide (perhaps indirectly)
some interface.  In addition, the registrations have names. (You can
think of the names as qualifiers of the provided interfaces.)

The term "interface specification" refers both to interfaces and to
interface declarations, such as declarations of interfaces implemented
by a class.


Single Adapters
===============

Let's look at a simple example, using a single required specification::

  >>> from zope.interface.adapter import AdapterRegistry
  >>> import zope.interface

  >>> class IR1(zope.interface.Interface):
  ...     pass
  >>> class IP1(zope.interface.Interface):
  ...     pass
  >>> class IP2(IP1):
  ...     pass

  >>> registry = AdapterRegistry()

We'll register an object that depends on IR1 and "provides" IP2::

  >>> registry.register([IR1], IP2, '', 12)

Given the registration, we can look it up again::

  >>> registry.lookup([IR1], IP2, '')
  12

Note that we used an integer in the example.  In real applications,
one would use some objects that actually depend on or provide
interfaces. The registry doesn't care about what gets registered, so
we'll use integers and strings to keep the examples simple. There is
one exception.  Registering a value of None unregisters any
previously-registered value.

If an object depends on a specification, it can be looked up with a
specification that extends the specification that it depends on::

  >>> class IR2(IR1):
  ...     pass
  >>> registry.lookup([IR2], IP2, '')
  12

We can use a class implementation specification to look up the object::

  >>> class C2:
  ...     zope.interface.implements(IR2)

  >>> registry.lookup([zope.interface.implementedBy(C2)], IP2, '')
  12


and it can be looked up for interfaces that its provided interface
extends::

  >>> registry.lookup([IR1], IP1, '')
  12
  >>> registry.lookup([IR2], IP1, '')
  12

But if you require a specification that doesn't extend the specification the
object depends on, you won't get anything::

  >>> registry.lookup([zope.interface.Interface], IP1, '')

By the way, you can pass a default value to lookup::

  >>> registry.lookup([zope.interface.Interface], IP1, '', 42)
  42

If you try to get an interface the object doesn't provide, you also
won't get anything::

  >>> class IP3(IP2):
  ...     pass
  >>> registry.lookup([IR1], IP3, '')

You also won't get anything if you use the wrong name::

  >>> registry.lookup([IR1], IP1, 'bob')
  >>> registry.register([IR1], IP2, 'bob', "Bob's 12")
  >>> registry.lookup([IR1], IP1, 'bob')
  "Bob's 12"

You can leave the name off when doing a lookup:

  >>> registry.lookup([IR1], IP1)
  12

If we register an object that provides IP1::

  >>> registry.register([IR1], IP1, '', 11)

then that object will be prefered over O(12)::

  >>> registry.lookup([IR1], IP1, '')
  11

Also, if we register an object for IR2, then that will be prefered
when using IR2::

  >>> registry.register([IR2], IP1, '', 21)
  >>> registry.lookup([IR2], IP1, '')
  21

lookup1
-------

Lookup of single adapters is common enough that there is a
specialized version of lookup that takes a single required interface:

  >>> registry.lookup1(IR2, IP1, '')
  21
  >>> registry.lookup1(IR2, IP1)
  21


Default Adapters
----------------
  
Sometimes, you want to provide an adapter that will adapt anything.
For that, provide None as the required interface::

  >>> registry.register([None], IP1, '', 1)
  
then we can use that adapter for interfaces we don't have specific
adapters for::

  >>> class IQ(zope.interface.Interface):
  ...     pass
  >>> registry.lookup([IQ], IP1, '')
  1

Of course, specific adapters are still used when applicable::

  >>> registry.lookup([IR2], IP1, '')
  21

Class adapters
--------------

You can register adapters for class declarations, which is almost the
same as registering them for a class::

  >>> registry.register([zope.interface.implementedBy(C2)], IP1, '', 'C21')
  >>> registry.lookup([zope.interface.implementedBy(C2)], IP1, '')
  'C21'

Unregistering
-------------

You can unregister by registering None, rather than an object:;

  >>> registry.register([zope.interface.implementedBy(C2)], IP1, '', None)
  >>> registry.lookup([zope.interface.implementedBy(C2)], IP1, '')
  21

Of course, this means that None can't be registered. This is an
exception to the statement, made earlier, that the registry doesn't
care what gets registered.

Multi-adapters
==============

You can adapt multiple specifications::

  >>> registry.register([IR1, IQ], IP2, '', '1q2')
  >>> registry.lookup([IR1, IQ], IP2, '')
  '1q2'
  >>> registry.lookup([IR2, IQ], IP1, '')
  '1q2'

  >>> class IS(zope.interface.Interface):
  ...     pass
  >>> registry.lookup([IR2, IS], IP1, '')

  >>> class IQ2(IQ):
  ...     pass

  >>> registry.lookup([IR2, IQ2], IP1, '')
  '1q2'
  
Default Adapters
----------------

As with single adapters, you can define default adapters by specifying
None for the *first* specification:

  >>> registry.register([None, IQ], IP2, '', 'q2')
  >>> registry.lookup([IS, IQ], IP2, '')
  'q2'

Null Adapters
=============

You can also adapt no specification:

  >>> registry.register([], IP2, '', 2)
  >>> registry.lookup([], IP2, '')
  2
  >>> registry.lookup([], IP1, '')
  2


Subscriptions
=============

Normally, we want to look up an object that most-closely matches a
specification.  Sometimes, we want to get all of the objects that
match some specification.  We use subscriptions for this.  We
subscribe objects against specifications and then later find all of
the subscribed objects::

  >>> registry.subscribe([IR1], IP2, 'sub12 1')
  >>> registry.subscriptions([IR1], IP2)
  ['sub12 1']

Note that, unlike regular adapters, subscriptions are unnamed.

The order of returned subscriptions is not specified.

You can have multiple subscribers for the same specification::

  >>> registry.subscribe([IR1], IP2, 'sub12 2')
  >>> subs = registry.subscriptions([IR1], IP2)
  >>> subs.sort()
  >>> subs
  ['sub12 1', 'sub12 2']

You can register subscribers for all specifications using None::

  >>> registry.subscribe([None], IP1, 'sub_1')
  >>> subs = registry.subscriptions([IR2], IP1)
  >>> subs.sort()
  >>> subs
  ['sub12 1', 'sub12 2', 'sub_1']

Subscriptions may be combined over multiple compatible specifications::

  >>> subs = registry.subscriptions([IR2], IP1)
  >>> subs.sort()
  >>> subs
  ['sub12 1', 'sub12 2', 'sub_1']
  >>> registry.subscribe([IR1], IP1, 'sub11')
  >>> subs = registry.subscriptions([IR2], IP1)
  >>> subs.sort()
  >>> subs
  ['sub11', 'sub12 1', 'sub12 2', 'sub_1']
  >>> registry.subscribe([IR2], IP2, 'sub22')
  >>> subs = registry.subscriptions([IR2], IP1)
  >>> subs.sort()
  >>> subs
  ['sub11', 'sub12 1', 'sub12 2', 'sub22', 'sub_1']
  >>> subs = registry.subscriptions([IR2], IP2)
  >>> subs.sort()
  >>> subs
  ['sub12 1', 'sub12 2', 'sub22']

Subscriptions can be on multiple specifications::

  >>> registry.subscribe([IR1, IQ], IP2, 'sub1q2')
  >>> registry.subscriptions([IR1, IQ], IP2)
  ['sub1q2']
  
As with single subscriptions and non-subscription adapters, you can
specify None for the first required interface, to specify a default::

  >>> registry.subscribe([None, IQ], IP2, 'sub_q2')
  >>> registry.subscriptions([IS, IQ], IP2)
  ['sub_q2']
  >>> subs = registry.subscriptions([IR1, IQ], IP2)
  >>> subs.sort()
  >>> subs
  ['sub1q2', 'sub_q2']

You can have subscriptions that are indepenent of any specifications::
  
  >>> registry.subscriptions([], IP1)
  []

  >>> registry.subscribe([], IP2, 'sub2')
  >>> registry.subscriptions([], IP1)
  ['sub2']
  >>> registry.subscribe([], IP1, 'sub1')
  >>> subs = registry.subscriptions([], IP1)
  >>> subs.sort()
  >>> subs
  ['sub1', 'sub2']
  >>> registry.subscriptions([], IP2)
  ['sub2']
