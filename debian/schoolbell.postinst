#!/bin/bash
# postinst script for server package

set -e

# summary of how this script can be called:
#        * <postinst> `configure' <most-recently-configured-version>
#        * <old-postinst> `abort-upgrade' <new version>
#        * <conflictor's-postinst> `abort-remove' `in-favour' <package>
#          <new-version>
#        * <deconfigured's-postinst> `abort-deconfigure' `in-favour'
#          <failed-install-package> <version> `removing'
#          <conflicting-package> <version>
# for details, see http://www.debian.org/doc/debian-policy/ or
# the debian-policy package
#
# quoting from the policy:
#     Any necessary prompting should almost always be confined to the
#     post-installation script, and should be protected with a conditional
#     so that unnecessary prompting doesn't happen if a package's
#     installation fails and the `postinst' is called with `abort-upgrade',
#     `abort-remove' or `abort-deconfigure'.

PYTHON=python2.3
package=schoolbell
sslcert=/etc/$package/$package.cert.pem
sslkey=/etc/$package/$package.privkey.pem
sslconf=/etc/$package/ssl-cert.cnf
config=/etc/$package/$package.conf
db_version=0.8     # TODO - delete this when schooltool can upgrade it's own database

# Helper Functions
set_simple () {
    # this sets a simple var in the config file overwriting all instances
    # already present.
    # $1 is the variable; $2 is a space separated list of the the values
    header="# marker for $1 settings - Please don't change or delete this line."
    stanza="$header"
    for i in $2;do
        stanza="$stanza\n$1 $i"
    done
    cp -a $config $config.tmp

    if [ `grep -c "$header" $config` == 0 ]; then
        echo "$header" >> $config
    fi

    cat $config                 \
    | grep -v "^ *${1} .*"      \
    | sed "s|$header|$stanza|"  \
    > $config.tmp

    mv -f $config.tmp $config
}

db_upgrade () {
    # Try to upgrade a database using a standalone upgrade script
    # arguments:
    # $1 old version
    importscr=/usr/lib/libschoolbell/scripts/schoolbell-import.py
    exportscr=/usr/lib/libschoolbell/scripts/schoolbell-export.py
    compat=/var/lib/$package/compat
    dump=/var/lib/$package/dump/
    backup=/var/lib/$package/backup/
    db=/var/lib/$package/Data.fs
    # only do anything unless we actually have a db and some compat libs
    if [ -f $db ] && [ -d $compat ];then
        mkdir -p $dump/calendars
        if PYTHONPATH=$compat $PYTHON $exportscr \
                $db $dump/backup.xml $dump/calendars; then
            # yay !! export sucessfull backing up old db
            mkdir -p $backup
            mv $db $backup
            mv $db.index $backup
            mv $db.lock $backup
            mv $db.tmp $backup
            if PYTHONPATH=/usr/lib/libschoolbell $PYTHON \
                $importscr $db $dump/backup.xml $dump/calendars ; then
                chown $package:$package $db*
            else
                # oops, we're screwed and way past the point of no return
                # try to restore db and let admin know
                db_upgrade=failed
                rm -f $db $db.index $db.lock $db.tmp
                mv $backup/* /var/lib/$package
                rmdir $backup
            fi
        else
            # dump failed!!! tell admin and continue
            db_upgrade=failed
        fi
        rm -rf $dump
    else
        db_upgrade=failed
    fi
    if [ z$db_upgrade == zfailed ];then
        db_fset $package/db_upgrade_error seen false
        db_input critical $package/db_upgrade_error || true
        db_go || true
    fi
    # try to clean up a little
    rmdir /var/lib/$package/dump || true
    rmdir /var/lib/$package/backup || true
}

. /usr/share/debconf/confmodule

case "$1" in
    configure|reconfigure)
    # Create a system user
    if ! getent group $package > /dev/null 2>&1 ; then
        addgroup --system --quiet $package
    fi
    if ! getent passwd $package > /dev/null 2>&1 ; then
        adduser --quiet \
        --system --disabled-login --ingroup $package \
        --home /var/lib/$package --no-create-home \
        $package
    fi
    # Create files and directories
    [ -d /var/lib/$package ] || mkdir -p /var/lib/$package
    [ -d /var/run/$package ] || mkdir -p /var/run/$package
    [ -d /var/log/$package ] || mkdir -p /var/log/$package
    chown $package:$package /var/lib/$package
    chown $package:$package /var/run/$package
    chown $package:$package /var/log/$package

    # Set the database version.
    # This is depended on and depends on code in preinst
    # TODO - delete this when schooltool can upgrade it's own database
    echo $db_version > /var/lib/$package/database_ver

    # try database upgrades of old versions
    db_get $package/auto_upgrade_db
    ans="$RET"
    db_fset $package/auto_upgrade_db seen false
    db_reset $package/auto_upgrade_db
    [ "$ans" == false ] || db_upgrade ${2}

    # reset the no_compat_libs question
    db_fset $package/no_compat_libs seen false
    db_reset $package/no_compat_libs

    #Make the config file
    #Put the default template there if none exists
    if [ ! -e $config ]; then
        cp -a /usr/share/$package/$package.conf.default $config
    fi

    ### Compatibility code added in 1.1 to convert old listen marker lines to
    ### rest marker lines
    ### it also removes listen/listen_ssl directives
    cp -a $config $config.tmp
    cat $config                 \
    | sed "s|# marker for listen settings - Please don't change or delete this line.|# marker for rest settings - Please don't change or delete this line.|"  \
    | sed "s|# marker for listen_ssl settings - Please don't change or delete this line.|# marker for rest_ssl settings - Please don't change or delete this line.|"  \
    | grep -v "^ *listen .*"      \
    | grep -v "^ *listen_ssl .*"      \
    > $config.tmp
    mv -f $config.tmp $config

    # Setup Interfaces
    db_get $package/rest
    set_simple rest "$RET"
    db_get $package/web
    set_simple web "$RET"
    # XXX - SSL certificate generation is disabled. dee config for details
    #db_get $package/listen_ssl
    #set_simple listen_ssl "$RET"
    #db_get $package/web_ssl
    #set_simple web_ssl "$RET"

    # XXX - SSL certificate generation is disabled. see .config for details
    # Should we create an SSL cert?
    #db_get $package/create-cert
    #Create="$RET"
    # re-set the default
    #db_reset $package/create-cert
    #if [ "z$Create" == ztrue ]; then
    if false; then
        db_get $package/cert-type
        case "$RET" in

            Create*)
            #Ok, create the SSL certificate, overwriting if necessary
            TMPFILE1=`mktemp` || exit 1
            TMPFILE2=`mktemp` || exit 1
            cp $sslconf $TMPFILE1
            # Get the answers to the cert questions
            for template in 'countryname' 'statename' 'localityname' \
                'organisationname' 'ouname' 'hostname' 'email';do
                db_get $package/$template
                ans="$RET"
                sed -e s#@"$template"@#"$ans"# $TMPFILE1 > $TMPFILE2
                cp $TMPFILE2 $TMPFILE1
            done
            export RANDFILE=/dev/random
            echo "Generating SSL Certificate... (might take a while)"
            openssl req -config $TMPFILE1 -new -x509 -nodes -out $sslcert \
                -keyout $sslkey
            cat $sslcert >> $sslkey
            rm -f $TMPFILE1 $TMPFILE2
            ;;

            Import*)
            # Import it from a file
            db_get $package/import-cert
            cp "$RET" $sslkey
            privkey=0
            while read x;do
                if [ `echo $x | grep -c -- '-----BEGIN.*PRIVATE KEY-----'` != 0 ] ;then
                    privkey=1
                fi
                if [ $privkey == 0 ];then
                    echo "$x"
                fi
                if [ `echo $x | grep -c -- '-----END.*PRIVATE KEY-----'` != 0 ] ;then
                    privkey=0
                fi
            done <$sslkey >$sslcert
            ;;
        esac
    fi
    # If an SSL Certificate exists, give it the right permissions and add it to the
    # Config file
    if [ -f $sslkey ]; then
        chown $package:$package $sslkey
        chmod 600 $sslkey
        set_simple ssl_certificate $sslkey
    fi
    ;;

    abort-upgrade|abort-remove|abort-deconfigure)

    ;;

    *)
        echo "postinst called with unknown argument \`$1'" >&2
        exit 1
    ;;

esac

db_stop

# dh_installdeb will replace this with shell code automatically
# generated by other debhelper scripts.

#DEBHELPER#

exit 0
